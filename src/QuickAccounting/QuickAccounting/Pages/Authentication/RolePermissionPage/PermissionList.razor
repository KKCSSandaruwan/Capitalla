@page "/app/rolepermissions"
@using System.Security.Claims
@inject IPrivilege _privilege
@inject IUser _user
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@attribute [Authorize]
<PageTitle>Role Permission</PageTitle>
<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h3>Role Permission</h3>
        </div>
    </div>
    <!-- /product list -->
    <div class="card padding1">
        <div class="card-body">
            <div class="table-responsive">
                <div class="row" style="align-items: center;">
                    <div class="col-lg-1 col-md-3 col-3">Role &emsp; : </div>
                    <div class="col-lg-3 col-md-3 col-3">
                <select class="form-control" style="width:260px;" @bind="intRoleId" @onclick="()=>Change()">
             <option value="0">Choose Role</option>
             @if(listRole == null)
             {

             }
             else
             {
                    @foreach(var item in listRole)
                    {
                        <option value="@item.RoleId">@item.RoleName</option>
                    }
             }
                </select>
                </div></div>
                <br /> <hr />
                <table class="table PermissionListTable">
                    @if(listModel == null)
                    {
                        <labe>Data not found</labe>
                    }
                    else
                    {
                                                @foreach(var item in listModel)
                                                {
                                                    <tr>
                                <td class=" align-middle">@item.FormName
                                </td>
                                <td class=" align-middle">
                                    <input type="checkbox" @bind="item.ShowAction" />
                                </td>

                                    </tr>
                                                }
                    }
                                        </table>
                                        @*<br/>
                                        <br/>*@
                <div class="col-lg-12 mt-3 p-0">
                    <button @onclick="Save" class="btn btn-submit me-2">Update</button>
                </div>
            </div>
        </div>
    </div>
    <!-- /product list -->
</div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    IList<Privilege> listModel;
    IList<Role> listRole;
    int intRoleId = 0;
    Privilege model = new Privilege();
    string strMenu = "Users";
    Role role = new Role();
    protected override async Task OnInitializedAsync()
    {
        //CheckPriviliagee
        var authState = await authenticationState;
        var strRole = authState.User;
        string strName = strRole.FindFirst(ClaimTypes.Role).Value;
        var strShow = await _privilege.PriviliageCheck(strMenu, strName);
        if (strShow.ShowAction == true)
        {
            await LoadData();
        }
        else
        {
            NavigationManager.NavigateTo("/app/dashboard");
            Snackbar.Add("You dont have to privilege..", Severity.Error);
        }
    }
    private async Task LoadData()
    {
        listRole = await _user.GetAllRole();
        intRoleId = 0;
        listModel = null;
        StateHasChanged();
    }
    private async void Save()
    {
        if (listModel == null)
        {
            Snackbar.Add("Invalid.", Severity.Error);
        }
       else if (intRoleId == 0)
        {
            Snackbar.Add("Invalid.", Severity.Error);
        }
        else
        {
            if (intRoleId == 1)
            {
                Snackbar.Add("Default value cannot update & delete.", Severity.Info);
            }
            else
            {
                var result = await _privilege.Delete(intRoleId);
                foreach (var item in listModel)
                {
                    model.RoleId = intRoleId;
                    model.FormName = item.FormName;
                    model.AddAction = item.AddAction;
                    model.EditAction = item.EditAction;
                    model.DeleteAction = item.DeleteAction;
                    model.ShowAction = item.ShowAction;
                    model.CompanyId = 1;
                    model.SettingType = "Account";
                    model.IsActive = true;
                    model.AddedDate = DateTime.Now;
                    model.ModifyDate = DateTime.Now;
                    await _privilege.Save(model);
                    StateHasChanged();
                }
                await LoadData();
                StateHasChanged();
                Snackbar.Add("Updated Successfully.", Severity.Success);
            }
        }
    }
    private async Task Change()
    {
        if (intRoleId == 0)
        {
            listModel = null;
        }
        else
        {
            listModel = await _privilege.GetbyId(intRoleId);
            role = await _privilege.GetId(intRoleId);
            StateHasChanged();
        }
    }
}
