@page "/app/corporate"

@inject ICompanyDup CompanyService
@inject ISnackbar Snackbar

<div class="content">
    <!-- Page Header: Title and Description -->
    <div class="page-header">
        <div class="page-title">
            <h3>Company</h3>
            <h5>Manage Company Details</h5>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="grid-container">
                <div class="grid-toolbar">
                    <!-- Grid Refresh Button: Refreshes the grid when clicked -->
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="refresh" Text="Refresh"
                                  Disabled="@(!HasLoadedCompanies)"
                                  IsBusy="@(!HasLoadedCompanies)" BusyText="Refrehing..."
                                  Click="onGridRefreshAsync" />
                    <!-- Grid Add Button: Allows adding a new row -->
                    <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Light" Text="Add"
                                  Disabled="@(!HasLoadedCompanies)"
                                  Click="@(args => OnGridCrudRow(SelectedCompanyId, CrudDialogType.Add))"
                                  @onclick:stopPropagation="true" />
                    <!-- Grid Export Button: Exports grid data to an XLS file -->
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="table_view" Text="Export XLS"
                                  Disabled="true"
                                  Click="OnGridExportToXLS" />
                </div>

                <!-- Data Grid Component: Displays the companies data in a table format -->
                <RadzenDataGrid @ref="GridCompany" Data="@Companies" TItem="CompanyDup" RowRender="OnRowRender" IsLoading="@(!HasLoadedCompanies)"
                                AllowAlternatingRows="false" AllowSorting="true"
                                AllowPaging="true" PageSize="10" PageSizeOptions="@(new int[] {10, 20, 50, 100})"
                                PagerAlwaysVisible="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Left"
                                AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" EditMode="Radzen.DataGridEditMode.Single"
                                class="grid-scrollable grid-centered-header" Style="height: 450px">

                    <!-- Column Definitions -->
                    <Columns>
                        <RadzenDataGridColumn TItem="CompanyDup" Property="CompanyId" Sortable="false" Visible="false"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.CompanyId))" />
                        <RadzenDataGridColumn TItem="CompanyDup" Property="CompanyName" Sortable="true" Width="250px"
                                              Frozen="true" FrozenPosition="FrozenColumnPosition.Left"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.CompanyName))" />
                        <RadzenDataGridColumn TItem="CompanyDup" Property="RegistrationNo" Sortable="true" Width="135px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.RegistrationNo))" />
                        <RadzenDataGridColumn TItem="CompanyDup" Property="VATNo" Sortable="true" Width="135px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.VATNo))" />
                        <RadzenDataGridColumn TItem="CompanyDup" Property="FullAddress" Sortable="true" Width="320px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.FullAddress))">
                            <Template Context="data">
                                <p style="white-space:pre-wrap">@data.FullAddress</p>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="CompanyDup" Property="PhoneNo" Sortable="true" Width="135px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.PhoneNo))" />
                        <RadzenDataGridColumn TItem="CompanyDup" Property="MobileNo" Sortable="true" Width="135px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.MobileNo))" />
                        <RadzenDataGridColumn TItem="CompanyDup" Property="FaxNo" Sortable="true" Width="135px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.FaxNo))" />
                        <RadzenDataGridColumn TItem="CompanyDup" Property="Email" Sortable="true" Width="200px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.Email))">
                            <Template Context="company">
                                <a href="mailto:@company.Email" target="_blank">@company.Email</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="CompanyDup" Property="Website" Sortable="true" Width="200px"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.Website))">
                            <Template Context="company">
                                <a href="@company.Website" target="_blank" rel="noopener noreferrer">@company.Website</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="CompanyDup" Property="Active" Sortable="true" Groupable="false" TextAlign="TextAlign.Center" Width="100px"
                                              Frozen="false" FrozenPosition="FrozenColumnPosition.Right"
                                              Title="@EntityAttributeHelper.GetDisplayName(typeof(CompanyDup), nameof(CompanyDup.Active))">
                            <Template Context="company">
                                <RadzenCheckBox @bind-Value="company.Active" ReadOnly="true" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="CompanyDup" Sortable="false" Groupable="false" Filterable="false" Title="Action" Width="140px"
                                              Frozen="true" FrozenPosition="FrozenColumnPosition.Right" TextAlign="TextAlign.Center">
                            <Template Context="company">
                                <!-- Grid View Button: Navigate to detail form -->
                                <RadzenButton Icon="visibility" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Title="View"
                                              Click="@(args => OnGridCrudRow(company.CompanyId, CrudDialogType.View))" @onclick:stopPropagation="true" />
                                <!-- Grid Edit Button: Navigate to edit detail form -->
                                <RadzenButton Icon="edit" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Title="Edit"
                                              Click="@(args => OnGridCrudRow(company.CompanyId, CrudDialogType.Edit))" @onclick:stopPropagation="true" />
                                <!-- Grid Status Toggle Button: Toggles active/inactive status -->
                                <RadzenButton Icon="sync_alt" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Title="Status Toggle"
                                              Click="@(args => OnGridToggleStatusAsync(company.CompanyId))" @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>

                    <EmptyTemplate>
                        <div class="grid-empty">
                            No records available!
                        </div>
                    </EmptyTemplate>
                </RadzenDataGrid>

                <!-- Company CRUD Dialog: Displays the CRUD dialog for viewing/adding/editing/deleting companies -->
                @if (IsVisibleDialogCrud)
                {
                    <CompanyDialogCrud DialogTitle="Company"
                                       DialogType="@DialogType"
                                       EntityId="@SelectedCompanyId"
                                       OnResponseReceived="@OnDialogCrudResponseAsync">
                    </CompanyDialogCrud>
                }
            </div>
        </div>
    </div>
</div>

@code {
    #region Properties
    private bool HasLoadedCompanies { get; set; } = false;
    private bool IsVisibleDialogCrud { get; set; } = false;
    private int SelectedCompanyId { get; set; } = 0;
    private CrudDialogType DialogType { get; set; }

    private RadzenDataGrid<CompanyDup>? GridCompany { get; set; }
    private IList<CompanyDup>? Companies { get; set; }

    #endregion

    #region Component Lifecycle
    /// <summary>
    /// Loads companies on component initialization.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load companies data
            await LoadCompaniesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading companies data: {ex.Message}");
            Snackbar.Add($"{ex.Message}", Severity.Error);
        }
    }

    #endregion

    #region Event Handlers
    /// <summary>
    /// Refreshes the grid by reloading the companies data.
    /// </summary>
    private async Task onGridRefreshAsync()
    {
        try
        {
            // Load companies data
            await LoadCompaniesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading companies data: {ex.Message}");
            Snackbar.Add("An error occurred while loading companies. Please try again later.", Severity.Error);
        }
    }

    /// <summary>
    /// Exports the grid data to an Excel file.
    /// </summary>
    private void OnGridExportToXLS()
    {
        try
        {
            // Pending Task: Logic to export the grid data to an Excel file.
        }
        catch (UnauthorizedAccessException ex)
        {
            Console.Error.WriteLine($"Unauthorized Access Exception: {ex.Message}");
            Snackbar.Add("You do not have permission to write the export file. Please check your access rights.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An unexpected error occurred: {ex.Message}");
            Snackbar.Add("An unexpected error occurred during the export process. Please try again or contact support.", Severity.Error);
        }
    }

    /// <summary>
    /// Handles the row rendering event for the data grid.
    /// </summary>
    /// <param name="args">Contains event data for the row being rendered, including row data and attributes.</param>
    private void OnRowRender(RowRenderEventArgs<CompanyDup> args)
    {
        // Check if the current row represents a mother company
        if (args.Data.IsMotherCompany)
        {
            // Apply a custom CSS class to highlight the row
            args.Attributes["class"] = "grid-row highlight";
        }
    }

    /// <summary>
    /// Handles the CRUD operation for a company by opening a dialog and populating it with the selected company's details.
    /// </summary>
    /// <param name="companyId">The ID of the company for which the CRUD operation will be performed.</param>
    /// <param name="dialogType">The type of CRUD dialog to be displayed (e.g., Add, Edit, View, Delete).</param>
    private void OnGridCrudRow(int companyId, CrudDialogType dialogType)
    {
        try
        {
            // Set the selected company ID for the CRUD operation
            SelectedCompanyId = companyId;

            // Set the dialog type (Add, Edit, View, Delete)
            DialogType = dialogType;

            // Make the CRUD dialog visible
            IsVisibleDialogCrud = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while performing the CRUD operation: {ex.Message}");
            Snackbar.Add("Failed to perform the operation. Please try again or contact support.", Severity.Error);
        }
    }

    /// <summary>
    /// Toggles the active status of the company, updates the status in the database, and reloads the companies.
    /// </summary>
    /// <param name="company">The CompanyDup object whose active status is to be toggled.</param>
    private async Task OnGridToggleStatusAsync(int companyId)
    {
        try
        {
            // Toggle the active status data in the database(handles validations and throws exceptions)
            await CompanyService.ToggleActiveAsync(companyId);

            // Reload the companies
            await LoadCompaniesAsync();

            // Notify the user of success
            Snackbar.Add("Active status updated successfully.", Severity.Success);
        }
        catch (ArgumentNullException ex)
        {
            Console.WriteLine($"ArgumentNullException: company data is null. Message: {ex.Message}");
            Snackbar.Add("Invalid input: required data is missing. Please check and try again.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while toggling active status in Company ID {companyId}: {ex.Message}");
            Snackbar.Add("Failed to update the active status of the company. Please try again later.", Severity.Error);
        }
    }

    /// <summary>
    /// Handles the result of a CRUD operation performed within a dialog.
    /// If the operation is successful, reloads companies to reflect changes.
    /// Ensures the visibility of the dialog is reset regardless of success or failure.
    /// </summary>
    /// <param name="isOperationSuccessful">A flag indicating whether the CRUD operation was successful.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnDialogCrudResponseAsync(bool isOperationSuccessful)
    {
        try
        {
            // Reload companies only if the CRUD operation was successful
            if (isOperationSuccessful)
            {
                await LoadCompaniesAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred while CRUD response handling: {ex.Message}");
            Snackbar.Add("An error occurred while CRUD response handling.", Severity.Error);
        }
        finally
        {
            // Ensure the CRUD dialog visibility is reset regardless of operation success or failure
            IsVisibleDialogCrud = false;
        }
    }

    #endregion

    #region Loading Methods
    /// <summary>
    /// Loads the list of companies.
    /// </summary>
    private async Task LoadCompaniesAsync()
    {
        try
        {
            // Mark the start of the loading process
            HasLoadedCompanies = false;

            // Load the list of companies
            Companies = await CompanyService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading companies: {ex.Message}");
            throw new Exception("Failed to load companies. Please try again later.", ex);
        }
        finally
        {
            // Update the end of the loading process
            HasLoadedCompanies = true;

            // Ensure the UI is updated
            StateHasChanged();
        }
    }

    #endregion
}
