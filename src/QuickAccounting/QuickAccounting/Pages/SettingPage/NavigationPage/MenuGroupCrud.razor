@using System.ComponentModel.DataAnnotations

@inject IMenuGroup MenuGroupService
@inject ISnackbar Snackbar

<div class="grid-container">
    <div class="grid-toolbar">
        <!-- Grid Refresh Button: Refreshes the grid when clicked -->
        <RadzenButton Icon="refresh" ButtonStyle="ButtonStyle.Light" Text="Refresh"
                      Disabled="@(!HasLoadedMenuGroups)"
                      IsBusy="@(!HasLoadedMenuGroups)" BusyText="Refrehing..."
                      Click="onGridRefresh" />
        <!-- Grid Add Button: Allows adding a new row -->
        <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Light" Text="Add"
                      Disabled="@(NewMenuGroup != null)"
                      Click="onGridAddRow" />
        <!-- Grid Export Button: Exports grid data to an XLS file -->
        <RadzenButton Icon="table_view" ButtonStyle="ButtonStyle.Light" Text="Export XLS"
                      Disabled="true"
                      Click="OnGridExportToXLS" />
    </div>

    <!-- Data Grid Component: Displays the Menu Groups data in a table format -->
    <RadzenDataGrid @ref="GridMenuGroups" Data="@MenuGroups" TItem="MenuGroup" IsLoading="@(!HasLoadedMenuGroups)"
                    AllowAlternatingRows="false" AllowSorting="true"
                    AllowPaging="true" PageSize="10" PageSizeOptions="@(new int[] {10, 20, 50, 100})"
                    PagerAlwaysVisible="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Left"
                    AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" EditMode="Radzen.DataGridEditMode.Single"
                    class="grid-scrollable">

        <!-- Column Definitions -->
        <Columns>
            <RadzenDataGridColumn TItem="MenuGroup" Property="MenuGroupId" Title="Menu Group ID" Sortable="true" Visible="false" />
            <RadzenDataGridColumn TItem="MenuGroup" Property="MenuGroupName" Title="Menu Group Name" Width="30%">
                <EditTemplate Context="menuGroup">
                    <RadzenTextBox @bind-Value="menuGroup.MenuGroupName" Name="txtMenuGroupName" class="w-100" />
                    <RadzenDataAnnotationValidator Component="txtMenuGroupName" Popup=true />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="MenuGroup" Property="IconName" Title="Icon Name" Sortable="true" Width="30%">
                <EditTemplate Context="menuGroup">
                    <RadzenTextBox @bind-Value="menuGroup.IconName" Name="txtIconName" class="w-100" />
                    <RadzenDataAnnotationValidator Component="txtIconName" Popup=true />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="MenuGroup" Property="Description" Title="Description" Sortable="true" Width="40%">
                <EditTemplate Context="menuGroup">
                    <RadzenTextBox @bind-Value="menuGroup.Description" Name="txtDescription" class="w-100" />
                    <RadzenDataAnnotationValidator Component="txtDescription" Popup=true />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="MenuGroup" Property="Active" Title="Active" Sortable="true" TextAlign="TextAlign.Center" Width="125px">
                <Template Context="menuGroup">
                    <RadzenCheckBox @bind-Value="menuGroup.Active" Disabled="true" />
                </Template>
                <EditTemplate Context="menuGroup">
                    <RadzenCheckBox @bind-Value="menuGroup.Active" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="MenuGroup" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Title="Action" Width="100px" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="menuGroup">
                    <!-- Grid Edit Button: Triggers edit mode -->
                    <RadzenButton Icon="edit" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Title="Edit"
                                  Click="@(args => OnGridEditRow(menuGroup))" @onclick:stopPropagation="true" />
                    <!-- Grid Status Toggle Button: Toggles active/inactive status -->
                    <RadzenButton Icon="sync_alt" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Title="Status Toggle"
                                  Click="@(args => OnGridToggleStatus(menuGroup))" @onclick:stopPropagation="true" />
                </Template>
                <EditTemplate Context="menuGroup">
                    <!-- Grid Save Button: Saves the edited row -->
                    <RadzenButton Icon="check" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Title="Save"
                                  Click="@(args => OnGridSaveRow(menuGroup))" />
                    <!-- Grid Cancel Button: Cancels the editing of the row -->
                    <RadzenButton Icon="close" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Title="Cancel"
                                  Click="@(args => OnGridCancelEdit(menuGroup))" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>

        <!-- Empty Template: Displays when no data is available -->
        <EmptyTemplate>
            <div class="grid-empty">
                No records available!
            </div>
        </EmptyTemplate>
    </RadzenDataGrid>
</div>

@code {
    #region Properties
    private bool HasLoadedMenuGroups { get; set; } = false;

    private RadzenDataGrid<MenuGroup> GridMenuGroups { get; set; }
    private MenuGroup? InitialMenuGroup { get; set; }
    private MenuGroup? NewMenuGroup { get; set; }

    private IList<MenuGroup>? MenuGroups { get; set; }

    #endregion

    #region Component Lifecycle
    /// <summary>
    /// Loads menu groups on component initialization.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load menu groups data
            await LoadMenuGroupsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading menu group data: {ex.Message}");
            Snackbar.Add($"{ex.Message}", Severity.Error);
        }
    }

    #endregion

    #region Event Handlers
    /// <summary>
    /// Refreshes the grid by reloading the menu groups data.
    /// </summary>
    private async Task onGridRefresh()
    {
        try
        {
            // Load menu groups data
            await LoadMenuGroupsAsync();

            // Reset the NewMenuGroup object
            NewMenuGroup = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading menu groups: {ex.Message}");
            Snackbar.Add("An error occurred while loading menu groups. Please try again later.", Severity.Error);
        }
    }

    /// <summary>
    /// Exports the grid data to an Excel file.
    /// </summary>
    private void OnGridExportToXLS()
    {
        try
        {
            // Pending Task: Logic to export the grid data to an Excel file.
        }
        catch (UnauthorizedAccessException ex)
        {
            Console.Error.WriteLine($"Unauthorized Access Exception: {ex.Message}");
            Snackbar.Add("You do not have permission to write the export file. Please check your access rights.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An unexpected error occurred: {ex.Message}");
            Snackbar.Add("An unexpected error occurred during the export process. Please try again or contact support.", Severity.Error);
        }
    }

    /// <summary>
    /// Adds a new row to the grid for creating a MenuGroup entry.
    /// </summary>
    private async Task onGridAddRow()
    {
        try
        {
            // Create a new MenuGroup object
            NewMenuGroup = new MenuGroup
                {
                    MenuGroupId = 0,
                    MenuGroupName = string.Empty,
                    IconName = string.Empty,
                    Description = string.Empty,
                    Active = true
                };

            // Open the new row in the RadzenDataGrid for editing
            await GridMenuGroups.InsertRow(NewMenuGroup);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while adding a new row: {ex.Message}");
            Snackbar.Add("Failed to add a new row. Please try again or contact support.", Severity.Error);
        }
    }

    /// <summary>
    /// Edits an existing row in the grid by populating it with the selected MenuGroup's details.
    /// </summary>
    /// <param name="menuGroup">The MenuGroup object containing the data to be edited.</param>
    private async Task OnGridEditRow(MenuGroup menuGroup)
    {
        try
        {
            // Store the original MenuGroup data to revert changes if the user cancels the edit
            InitialMenuGroup = new MenuGroup
                {
                    MenuGroupId = menuGroup.MenuGroupId,
                    MenuGroupName = menuGroup.MenuGroupName,
                    IconName = menuGroup.IconName,
                    Description = menuGroup.Description,
                    CreatedBy = menuGroup.CreatedBy,
                    CreatedDate = menuGroup.CreatedDate,
                    ModifiedBy = menuGroup.ModifiedBy,
                    ModifiedDate = menuGroup.ModifiedDate,
                    Active = menuGroup.Active
                };

            // Open the selected row in the RadzenDataGrid for editing
            await GridMenuGroups.EditRow(menuGroup);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while editing a row: {ex.Message}");
            Snackbar.Add("Failed to edit a row. Please try again or contact support.", Severity.Error);
        }
    }

    /// <summary>
    /// Saves the MenuGroup data to the database, handles possible exceptions, and provides feedback to the user.
    /// </summary>
    /// <param name="menuGroup">The MenuGroup object containing the data to be saved.</param>
    private async Task OnGridSaveRow(MenuGroup menuGroup)
    {
        try
        {
            // Insert or update the MenuGroup data in the database(handles validations and throws exceptions)
            await MenuGroupService.UpsertAsync(menuGroup);

            // Exit the edit mode and update the grid with the saved data
            await GridMenuGroups.UpdateRow(menuGroup);

            // Reload the menu groups
            await LoadMenuGroupsAsync();

            // Notify the user of success
            Snackbar.Add("Menu group saved successfully.", Severity.Success);

            // Reset the NewMenuGroup object
            NewMenuGroup = null;
        }
        catch (ArgumentNullException ex)
        {
            Console.WriteLine($"ArgumentNullException: Menu group data is null. Message: {ex.Message}");
            Snackbar.Add("Invalid input: required data is missing. Please check and try again.", Severity.Error);
        }
        catch (ValidationException ex)
        {
            Console.WriteLine($"Validation error while saving MenuGroup ID {menuGroup?.MenuGroupId}: {ex.Message}");
            Snackbar.Add($"Validation errors: {ex.Message}", Severity.Warning);
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"Duplicate MenuGroup error: {ex.Message}");
            Snackbar.Add($"Duplicate entry: {ex.Message}", Severity.Warning);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while saving MenuGroup ID {menuGroup?.MenuGroupId}: {ex.Message}");
            Snackbar.Add("Failed to save the menu group. Please try again later.", Severity.Error);
        }
    }

    /// <summary>
    /// Toggles the active status of the MenuGroup, updates the status in the database, and reloads the menu groups.
    /// </summary>
    /// <param name="menuGroup">The MenuGroup object whose active status is to be toggled.</param>
    private async Task OnGridToggleStatus(MenuGroup menuGroup)
    {
        try
        {
            // Toggle the active status data in the database(handles validations and throws exceptions)
            await MenuGroupService.ToggleActiveAsync(menuGroup.MenuGroupId);

            // Reload the menu groups
            await LoadMenuGroupsAsync();

            // Notify the user of success
            Snackbar.Add("Active status updated successfully.", Severity.Success);
        }
        catch (ArgumentNullException ex)
        {
            Console.WriteLine($"ArgumentNullException: Menu group data is null. Message: {ex.Message}");
            Snackbar.Add("Invalid input: required data is missing. Please check and try again.", Severity.Error);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while toggling active status in MenuGroup ID {menuGroup?.MenuGroupId}: {ex.Message}");
            Snackbar.Add("Failed to update the active status of the menu group. Please try again later.", Severity.Error);
        }
    }

    /// <summary>
    /// Cancels the edit operation on the MenuGroup and reverts any changes made to the object.
    /// </summary>
    /// <param name="menuGroup">The MenuGroup object that was being edited.</param>
    private void OnGridCancelEdit(MenuGroup menuGroup)
    {
        try
        {
            // Check if there is an initial state to revert to
            if (InitialMenuGroup != null)
            {
                // Revert the edited object properties to their original state from InitialMenuGroup
                menuGroup.MenuGroupId = InitialMenuGroup.MenuGroupId;
                menuGroup.MenuGroupName = InitialMenuGroup.MenuGroupName;
                menuGroup.IconName = InitialMenuGroup.IconName;
                menuGroup.Description = InitialMenuGroup.Description;
                menuGroup.CreatedBy = InitialMenuGroup.CreatedBy;
                menuGroup.CreatedDate = InitialMenuGroup.CreatedDate;
                menuGroup.ModifiedBy = InitialMenuGroup.ModifiedBy;
                menuGroup.ModifiedDate = InitialMenuGroup.ModifiedDate;
                menuGroup.Active = InitialMenuGroup.Active;
            }

            // Cancel the edit mode for the grid row
            GridMenuGroups.CancelEditRow(menuGroup);

            // Clear the temporary object used for adding new menu groups
            NewMenuGroup = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred while canceling the edit: {ex.Message}");
            Snackbar.Add("An unexpected error occurred while canceling the edit. Please try again.", Severity.Error);
        }
    }

    #endregion

    #region Loading Methods
    /// <summary>
    /// Loads the list of menu groups.
    /// </summary>
    private async Task LoadMenuGroupsAsync()
    {
        try
        {
            // Mark the start of the loading process
            HasLoadedMenuGroups = false;

            // Load the list of settled customers.
            MenuGroups = await MenuGroupService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading menu groups: {ex.Message}");
            throw new Exception("Failed to load menu groups. Please try again later.", ex);
        }
        finally
        {
            // Update the end of the loading process
            HasLoadedMenuGroups = true;

            // Ensure the UI is updated
            StateHasChanged();
        }
    }

    #endregion
}
